{"version":3,"sources":["TimerRx/TimerRx.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","startTime","useState","time","setTime","isActive","setIsActive","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","next","complete","className","s","sec","parseInt","min","hour","hourMinSec","onClick","onDoubleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA4EeA,EAvED,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACb,EAAwBC,mBAASD,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAoBAC,qBAAU,WACN,IAAMC,EAAe,IAAIC,IASzB,OARAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHR,GACAD,GAAQ,SAAAD,GAAI,OAAIA,EAAO,UAI5B,WACHK,EAAaM,OACbN,EAAaO,cAElB,CAACV,IAcJ,OACI,sBAAKW,UAAU,QAAf,UACI,oDACA,qBAAKA,UAAU,SAAf,SAfW,SAACC,GAChB,IAAIC,EAAMC,SAAUF,EAAI,IAAQ,IAC5BG,EAAMD,SAAUF,EAAC,IAAkB,IACnCI,EAAOF,SAAUF,EAAC,KAAuB,IAM7C,OAFAI,EAAQA,EAAO,GAAM,IAAMA,EAAOA,GAEpB,KAHdD,EAAOA,EAAM,GAAM,IAAMA,EAAMA,GAGL,KAJ1BF,EAAOA,EAAM,GAAM,IAAMA,EAAMA,GAWtBI,CAAWnB,KAEhB,sBAAKa,UAAU,QAAf,UACI,wBAAQA,UAAS,oCAA+BX,EAAW,SAAW,YAAckB,QAASlB,EAjD5F,WACTD,EAAQH,GACRK,GAAaD,IANH,WACVC,GAAaD,IAoDL,SACKA,EAAW,OAAS,UAEzB,wBAAQW,UAAU,WAAWQ,cA/C5B,WACTlB,GAAY,IA8CJ,kBAGA,wBAAQU,UAAU,WAAWO,QA9C3B,WACVnB,EAAQH,GACRK,GAAY,IA4CJ,0BCzDDmB,MARf,WACE,OACE,8BACE,cAAC,EAAD,CAASxB,UAAW,WCMXyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96c6db1b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { interval, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport \"./TimerRx.css\";\r\n\r\nconst Timer = ({ startTime }) => {\r\n    const [time, setTime] = useState(startTime);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    const start = () =>  {\r\n        setIsActive(!isActive);\r\n    }\r\n\r\n    const stop = () => {\r\n        setTime(startTime);\r\n        setIsActive(!isActive);\r\n    }\r\n\r\n    const wait = () => {\r\n        setIsActive(false);\r\n    }\r\n\r\n    const reset = () => {\r\n        setTime(startTime);\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribe$ = new Subject();\r\n        interval(1000)\r\n            .pipe(takeUntil(unsubscribe$))\r\n            .subscribe(() => {\r\n                if (isActive) {\r\n                    setTime(time => time + 1000);\r\n                }\r\n            });\r\n        \r\n        return () => {\r\n            unsubscribe$.next();\r\n            unsubscribe$.complete();\r\n        };\r\n    }, [isActive]);\r\n\r\n    const hourMinSec = (s) => {\r\n        let sec = parseInt((s / 1000) % 60),\r\n            min = parseInt((s / (1000 * 60)) % 60),\r\n            hour = parseInt((s / (1000 * 60 * 60)) % 24)\r\n\r\n        sec = (sec < 10) ? '0' + sec : sec;\r\n        min = (min < 10) ? '0' + min : min;\r\n        hour = (hour < 10) ? '0' + hour : hour;\r\n\r\n        return hour + ':' + min + ':' + sec;\r\n    }\r\n\r\n    return (\r\n        <div className=\"appRx\">\r\n            <h2>Timer RxJS + React</h2>\r\n            <div className=\"timeRx\">\r\n                {hourMinSec(time)}\r\n            </div>\r\n            <div className=\"rowRx\">\r\n                <button className={`buttonRx button-primaryRx-${isActive ? 'active' : 'inactive'}`} onClick={isActive ? stop : start}>\r\n                    {isActive ? 'Stop' : 'Start'}\r\n                </button>\r\n                <button className=\"buttonRx\" onDoubleClick={wait}>\r\n                    Wait\r\n                </button>\r\n                <button className=\"buttonRx\" onClick={reset}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timer;","import React from 'react';\r\nimport TimerRx from \"./TimerRx/TimerRx.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TimerRx startTime={3590000} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}